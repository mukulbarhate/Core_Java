before java 5

List mylist=new ArrayList();

mylist.add(new Integer(100));
mylist.add("hello");
mylist.add(new Double(3.4));

    because "add()" method argument used to be java.lang.Object

while reading

String str=(String)mylist.get(1);

	because "get()" method return type used to be java.lang.Object.

what is the risk involved in case of above code?

if "Integer" is there at 1 position then we will get ClassCastException.

java 5 onwards

Generics

List<String> mylist=new ArrayList<String>();

now compiler will see to it that mylist will be used with String only 
or else it will give error which is much better than ClassCastException. 

e.g.

mylist.add("hello");
mylist.add("welcome");
mylist.add(100); //  compilation error

at the time of reading

String str=mylist.get(1); // no typecasting required

if u say 
Integer ob=mylist.get(0); // u will get compilation error

Hence we can say that Generics provide "type-safety".















